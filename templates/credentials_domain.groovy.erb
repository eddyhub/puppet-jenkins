/*
 * The MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

import hudson.model.User;
import hudson.util.Secret
import jenkins.model.*
import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.domains.*
import com.cloudbees.plugins.credentials.impl.*
import java.lang.System

// TODO:
// * Add more comments and more log output, maybe even use an extra log file
// * add tests
////////////////////////////////////////////////////////////////////////////////
// defines which puppet provides
////////////////////////////////////////////////////////////////////////////////
def name = "<%= @name %>"
def description = "<%= @description %>"

<% if @hostname_specification_include_list != nil %>
def hostnameSpecificationIncludeList = "<%= @hostname_specification_include_list.join(" ") %>"
<% else %>
def hostnameSpecificationIncludeList = null
<% end %>

<% if @hostname_specification_exclude_list != nil %>
def hostnameSpecificationExcludeList = "<%= @hostname_specification_exclude_list.join(" ") %>"
<% else %>
def hostnameSpecificationExcludeList = null
<% end %>

<% if @hostname_port_specification_include_list != nil %>
def hostnamePortSpecificationIncludeList = "<%= @hostname_port_specification_include_list.join(" ") %>"
<% else %>
def hostnamePortSpecificationIncludeList = null
<% end %>

<% if @hostname_port_specification_exclude_list != nil %>
def hostnamePortSpecificationExcludeList = "<%= @hostname_port_specification_exclude_list.join(" ") %>"
<% else %>
def hostnamePortSpecificationExcludeList = null
<% end %>

<% if @path_specification_include_list != nil %>
def pathSpecificationIncludeList = "<%= @path_specification_include_list.join(" ") %>"
<% else %>
def pathSpecificationIncludeList = null
<% end %>

<% if @path_specification_exclude_list != nil %>
def pathSpecificationExcludeList = "<%= @path_specification_exclude_list.join(" ") %>"
<% else %>
def pathSpecificationExcludeList = null
<% end %>

<% if @scheme_specification_list != nil %>
def schemeSpecificationList = "<%= @scheme_specification_list.join(" ") %>"
<% else %>
def schemeSpecificationList = null
<% end %>

def pathSpecificationCaseSensitive = <%= @path_specification_case_sensitive %>
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// Header for log
////////////////////////////////////////////////////////////////////////////////
println("########## START: configuring credentials domain: ${name} ##########")
////////////////////////////////////////////////////////////////////////////////

class JenkinsCredentialsDomain {

  def name = null
  def description = null
  def hostnameSpecificationIncludeList = null
  def hostnameSpecificationExcludeList = null
  def hostnamePortSpecificationIncludeList = null
  def hostnamePortSpecificationExcludeList = null
  def pathSpecificationIncludeList = null
  def pathSpecificationExcludeList = null
  def pathSpecificationCaseSensitive = null
  def schemeSpecificationList = null

  def newDomain = null
  def oldDomain = null

  def stdout = null
  def jenkinsInstance = Jenkins.getInstance();
  def credentialsStore = jenkinsInstance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider').first().getStore()

  def domainList = credentialsStore.getDomains()

  public JenkinsCredentialsDomain(stdout,
				  name,
				  description,
				  hostnameSpecificationIncludeList,
				  hostnameSpecificationExcludeList,
				  hostnamePortSpecificationIncludeList,
				  hostnamePortSpecificationExcludeList,
				  pathSpecificationIncludeList,
				  pathSpecificationExcludeList,
				  pathSpecificationCaseSensitive,
				  schemeSpecificationList) {
    this.name = name
    this.description = description

    this.hostnameSpecificationIncludeList = hostnameSpecificationIncludeList
    this.hostnameSpecificationExcludeList = hostnameSpecificationExcludeList
    this.hostnamePortSpecificationIncludeList = hostnamePortSpecificationIncludeList
    this.hostnamePortSpecificationExcludeList = hostnamePortSpecificationExcludeList
    this.pathSpecificationIncludeList = pathSpecificationIncludeList
    this.pathSpecificationExcludeList = pathSpecificationExcludeList
    this.pathSpecificationCaseSensitive = pathSpecificationCaseSensitive
    this.schemeSpecificationList = schemeSpecificationList

    this.stdout = stdout
  }

  public void create() {
    newDomain = new Domain(name,
			   description,
			   [new HostnameSpecification(hostnameSpecificationIncludeList, hostnameSpecificationExcludeList),
			    new HostnamePortSpecification(hostnamePortSpecificationIncludeList, hostnamePortSpecificationExcludeList),
			    new PathSpecification(pathSpecificationIncludeList, pathSpecificationExcludeList ,pathSpecificationCaseSensitive),
			    new SchemeSpecification(schemeSpecificationList)
			   ]
			  )
    oldDomain= domainList.findAll() {domain ->
      if (domain.getName() == name) true
      else false
    }
    assert oldDomain.size == 1 || oldDomain.size == 0
    if (oldDomain.size == 1) {
      credentialsStore.updateDomain(oldDomain.first(), newDomain)
    }
    else {
      credentialsStore.addDomain(newDomain, [])
    }
    save()
  }

  private void save() {
    jenkinsInstance.save()
  }
}

def credentialsDomain = new JenkinsCredentialsDomain(System.out,
					       name,
					       description,
					       hostnameSpecificationIncludeList,
					       hostnameSpecificationExcludeList,
					       hostnamePortSpecificationIncludeList,
					       hostnamePortSpecificationExcludeList,
					       pathSpecificationIncludeList,
					       pathSpecificationExcludeList,
					       pathSpecificationCaseSensitive,
					       schemeSpecificationList)
credentialsDomain.create()
////////////////////////////////////////////////////////////////////////////////
// Footer for log
////////////////////////////////////////////////////////////////////////////////
println("########## END: configuring credentials domain: ${name} ##########")
////////////////////////////////////////////////////////////////////////////////



