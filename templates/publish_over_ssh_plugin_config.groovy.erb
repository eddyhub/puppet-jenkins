/*
 * The MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

import hudson.model.*
import hudson.slaves.*
import jenkins.model.*
import jenkins.slaves.*
import net.sf.json.*
import jenkins.plugins.publish_over_ssh.*

// import jenkins.plugins.publish_over_ssh.*
// import net.sf.json.*
// def jenkinsInstance = Jenkins.getInstance();
// def pluginInstance = jenkinsInstance.getDescriptor("jenkins.plugins.publish_over_ssh.BapSshHostConfiguration")
// def pluginInstance2 = jenkinsInstance.getDescriptor("jenkins.plugins.publish_over_ssh.BapSshPublisherPlugin")
// def plugins = Jenkins.instance.pluginManager.plugins
// //out.println(plugins)
// plugin = plugins[20]

// def json = new JSONObject()
// json.put('encryptedPassphrase', 'test-encryptedPassphrase')
// json.put('keyPath', 'test-keyPath')
// json.put('key', 'test-key')
// json.put('disableAllExec', 'test-disableAllExec')

// out.println(plugin.getPlugin().configure(null, json))
// out.println(plugin.getPlugin().getConfigXml())
// out.println(pluginInstance.configure(null, json))
// out.println(pluginInstance)
// out.println(pluginInstance2.setCommonConfig(new BapSshCommonConfiguration("testXXX-encryptedpassphrase", "testXXX-key", "testXXX-keypath", true)))
////////////////////////////////////////////////////////////////////////////////
// Header for log
////////////////////////////////////////////////////////////////////////////////
println("########## START: configuring publish-over-ssh plugin ##########")
////////////////////////////////////////////////////////////////////////////////

class PluginConfig {
  def jenkinsInstance = Jenkins.getInstance();
  def pluginInstance = jenkinsInstance.getDescriptor("jenkins.plugins.publish_over_ssh.BapSshPublisherPlugin")
  def stdout = System.out

  public PluginConfig() {}

  public void create() {
    //////////////////////////////////////////////////////////////////////////////
    // defines which puppet provides
    //////////////////////////////////////////////////////////////////////////////

    def common_config = new BapSshCommonConfiguration("<%= @encrypted_passphrase %>",
						      "<%= @key %>",
						      "",
						      <%= @disable_all_exec %>)
    //////////////////////////////////////////////////////////////////////////////
    pluginInstance.setCommonConfig(common_config)
    save()
  }

  private save() {
    pluginInstance.save()
    jenkinsInstance.save()
  }
}

def pluginConfig = new PluginConfig()
pluginConfig.create()
////////////////////////////////////////////////////////////////////////////////
// Footer for log
////////////////////////////////////////////////////////////////////////////////
println("########## END: configuring publish-over-ssh plugin ##########")
////////////////////////////////////////////////////////////////////////////////
