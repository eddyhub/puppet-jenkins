/*
 * The MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

import hudson.model.User;
import hudson.tasks.Mailer;
import jenkins.model.IdStrategy.CaseSensitive;
import hudson.plugins.sshslaves.*
import hudson.security.ACL
import hudson.security.PermissionAdder
import hudson.security.AuthorizationStrategy
import hudson.security.FullControlOnceLoggedInAuthorizationStrategy
import hudson.security.GlobalMatrixAuthorizationStrategy
import hudson.security.GlobalMatrixAuthorizationStrategy.PermissionAdderImpl
import hudson.security.ProjectMatrixAuthorizationStrategy
import hudson.security.HudsonPrivateSecurityRealm
import hudson.security.LDAPSecurityRealm
import hudson.security.Permission
import hudson.util.Secret
import jenkins.model.*

import java.lang.System;

// TODO:
// * Add more comments and more log output, maybe even use an extra log file
// * add tests
// * implement ensure
////////////////////////////////////////////////////////////////////////////////
// defines which puppet provides
////////////////////////////////////////////////////////////////////////////////
def userId = "<%= @user_id %>"
def eMail = "<%= @email %>"
def password = "<%= @password %>"
def fullName = "<%= @full_name %>"
def publicKey = "<%= @public_key %>"
def description = "<%= @description %>"

////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// Header for log
////////////////////////////////////////////////////////////////////////////////
println("########## START: configuring user: ${userId} ##########")
////////////////////////////////////////////////////////////////////////////////
/**
 * Installs a name either from a file, an URL, or from update center.
 * Much of the code is from the package hudson.cli
 */

class JenkinsUser {

  def stdout = null
  def userId = null
  def eMail = null
  def password = null
  def fullName = null
  def publicKey = null
  def description = null
  def user = null

  def jenkinsInstance = Jenkins.getInstance();
  def authorizationStrategy = jenkinsInstance.getAuthorizationStrategy();

  public JenkinsUser(stdout, userId, eMail, password, fullName, publicKey, description) {
    this.stdout = stdout
    this.userId = userId
    this.eMail = eMail
    this.password = password
    this.fullName = fullName
    this.publicKey = publicKey
    this.description = description
    this.user = User.get(userId, true, null)
  }

  public void create() {
    if (eMail != "") {
      user.addProperty(new Mailer.UserProperty(eMail))
    }
    if (publicKey != "" ) {
      user.addProperty(new org.jenkinsci.main.modules.cli.auth.ssh.UserPropertyImpl(publicKey))
    }

    if (description != "") {
      user.setDescription(description)
    }
    //Make the user an administrator
    addPermission(Jenkins.ADMINISTER)
    save()
  }

  private void save() {
    user.save()
    jenkinsInstance.save()
  }

  public void addPermission(permission) {
    if (authorizationStrategy instanceof GlobalMatrixAuthorizationStrategy) {
      stdout.println("GlobalMatrixAuthorizationStrategy")
      new PermissionAdderImpl().add((GlobalMatrixAuthorizationStrategy) authorizationStrategy, user, permission)
    }
  }

  public void delete() {
    user.delete()
    save()
  }
}

def user = new JenkinsUser(System.out, userId, eMail, password, fullName, publicKey, description)
<% if @ensure == 'present' %>
user.create()
<% else %>
user.delete()
<% end %>
////////////////////////////////////////////////////////////////////////////////
// Footer for log
////////////////////////////////////////////////////////////////////////////////
println("########## END: configuring user: ${userId} ##########")
////////////////////////////////////////////////////////////////////////////////



