/*
 * The MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

import hudson.model.User;
import hudson.util.Secret
import jenkins.model.*
import com.cloudbees.plugins.credentials.*
import com.cloudbees.plugins.credentials.domains.*
import com.cloudbees.plugins.credentials.impl.*
import com.cloudbees.jenkins.plugins.sshcredentials.impl.*
import java.lang.System

// TODO:
// * Add more comments and more log output, maybe even use an extra log file
// * add tests
////////////////////////////////////////////////////////////////////////////////
// defines which puppet provides
////////////////////////////////////////////////////////////////////////////////
def id = "<%= @id %>"

<% if @domain != nil %>
def domain = "<%= @domain %>"
<% else %>
def domain = null
<% end %>

def scope = "<%= @scope %>"
def username = "<%= @username %>"
def passphrase = "<%= @passphrase %>"
def privateKeyString = '''<%= @private_key_string %>'''
def description = "<%= @description %>"
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// Header for log
////////////////////////////////////////////////////////////////////////////////
println("########## START: configuring credentials: ${id} ##########")
////////////////////////////////////////////////////////////////////////////////

class JenkinsCredentials {

  def id = null
  def domain = null
  def scope = null
  def username = null
  def passphrase = null
  def privateKeyString = null
  def description = null
  def oldCredentials = null
  def newCredentials = null

  def stdout = null
  def jenkinsInstance = Jenkins.getInstance();
  def credentialsStore = jenkinsInstance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider').first().getStore()

  def domainList = credentialsStore.getDomains()

  public JenkinsCredentials(stdout, id, domain, scope, username, passphrase, privateKeyString, description) {
    this.id = id
    this.domain = domain
    if (scope == "GLOBAL") {
      this.scope = CredentialsScope.GLOBAL
    }
    else {
      this.scope = CredentialsScope.SYSTEM
    }
    this.username = username
    this.passphrase = passphrase
    this.privateKeyString = privateKeyString
    this.description = description
    this.stdout = stdout
  }

  public void create() {
    setDomain()
    newCredentials = new BasicSSHUserPrivateKey(scope, id, username, new BasicSSHUserPrivateKey.DirectEntryPrivateKeySource(privateKeyString), passphrase, description)
    oldCredentials = credentialsStore.getCredentials(domain).findAll() {creds ->
      if (creds.getId() == id) true
      else false
    }
    assert oldCredentials.size == 1 || oldCredentials.size == 0
    if (oldCredentials.size == 1) {
      credentialsStore.updateCredentials(domain, oldCredentials.first(), newCredentials)
    }
    else {
      credentialsStore.addCredentials(domain, newCredentials)
    }
    save()
  }

  private void setDomain() {
    if (domain == null) {
      this.domain = Domain.global()
    }
    else {
      def tmpDomain = domainList.findAll() {dom ->
	if (dom.getName() == domain) true
	else false
      }
      assert tmpDomain.size == 1
      domain = tmpDomain.first()
    }
  }

  private void save() {
    jenkinsInstance.save()
  }
}

def credentials = new JenkinsCredentials(System.out, id, domain, scope, username, passphrase, privateKeyString, description)
credentials.create()
////////////////////////////////////////////////////////////////////////////////
// Footer for log
////////////////////////////////////////////////////////////////////////////////
println("########## END: configuring credentials: ${id} ##########")
////////////////////////////////////////////////////////////////////////////////



