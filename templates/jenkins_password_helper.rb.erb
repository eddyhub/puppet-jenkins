/*
 * The MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

#!/usr/bin/env ruby

# This is a helper script for puppet to encrypt and decrypt the
# password jenkins of jenkins

require 'openssl'
require 'digest/sha2'
require "base64"
require 'optparse'

# Jenkins uses the string "::::MAGIC::::" like a checksum in keys and
# encrypted data
MAGIC = "::::MAGIC::::"
master_key_file_path = '<%= @master_key_file_path %>'
hudson_util_secret_file_path = '<%= @hudson_util_secret_file_path %>'

# master_key_file_path = '/var/lib/jenkins/secrets/master.key'
# hudson_util_secret_file_path = '/var/lib/jenkins/secrets/hudson.util.Secret'

# This method just reads the keys and decrypts the master key from jenkins
# master_key: path to the file master.key
# default: ~jenkins/secrets/master.key
#
# hudson_util_secret: path to the file hudson.util.Secret
# default: ~jenkins/secrets/hudson.util.Secret
#
def get_master_key(master_key, hudson_util_secret)
  master_key = open(master_key).readlines[0]
  hudson_util_secret = open(hudson_util_secret).readlines.join("")

  hashed_master_key = (Digest::SHA2.new << master_key).digest[0..15]

  aes = OpenSSL::Cipher::Cipher.new("AES-128-ECB")
  aes.decrypt
  aes.key = hashed_master_key

  # now we got the key, which contains ::::MAGIC::::
  jenkins_decrypted_key = aes.update(hudson_util_secret) + aes.final
  raise "Encryption Error, could not read correct key" unless jenkins_decrypted_key.include?(MAGIC)

  key = jenkins_decrypted_key[0..-15]
  key = key[0..15]
end

# master_key: path to the file master.key
# default: ~jenkins/secrets/master.key
#
# hudson_util_Secret: path to the file hudson.util.Secret
# default: ~jenkins/secrets/hudson.util.Secret
#
# data: string which should be decrypted
def decrypt(master_key, hudson_util_secret, data)
  key = get_master_key(master_key, hudson_util_secret)
  aes = OpenSSL::Cipher::Cipher.new("AES-128-ECB")
  aes.decrypt
  aes.key = key
  data = aes.update(data) + aes.final
  data.gsub!(Regexp.new("(#{MAGIC})*"), "")
  data
end

def encrypt(master_key, hudson_util_secret, data)
  key = get_master_key(master_key, hudson_util_secret)
  aes = OpenSSL::Cipher::Cipher.new("AES-128-ECB")
  aes.encrypt
  aes.key = key
  data = aes.update(data+MAGIC) + aes.final
  data
end

# This is just a convenience method, same parametes as in decrypt, but
# data is base64 encoded and will be decoded before processing
def decrypt_base64(master_key, hudson_util_secret, data)
  decrypt(master_key, hudson_util_secret, Base64.strict_decode64(data))
end

# This is just a convenience method, same parametes as in encrypt, but
# data will be returned base64 encoded
def encrypt_base64(master_key, hudson_util_secret, data)
  Base64.strict_encode64(encrypt(master_key, hudson_util_secret, data))
end

# puts real_data == decrypt_base64(master_key_file_path, hudson_util_secret_file_path, data)
# puts data == encrypt_base64(master_key_file_path, hudson_util_secret_file_path, real_data)

options = {:password => nil}

OptionParser.new do |opts|
  opts.banner = "Usage: jenkins_password_helper [options]"

  opts.on("-p", "--password PASSWORD", "Encrypt string with jenkins password.") do |pass|
    options[:password] = pass
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end.parse!


if options[:password] != nil
  print encrypt_base64(master_key_file_path, hudson_util_secret_file_path, options[:password])
end
